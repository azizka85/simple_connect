// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file proto/greet/timing.proto (package greet, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message greet.TimingInputRequest
 */
export class TimingInputRequest extends Message<TimingInputRequest> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<TimingInputRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "greet.TimingInputRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimingInputRequest {
    return new TimingInputRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimingInputRequest {
    return new TimingInputRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimingInputRequest {
    return new TimingInputRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TimingInputRequest | PlainMessage<TimingInputRequest> | undefined, b: TimingInputRequest | PlainMessage<TimingInputRequest> | undefined): boolean {
    return proto3.util.equals(TimingInputRequest, a, b);
  }
}

/**
 * @generated from message greet.MessageInfo
 */
export class MessageInfo extends Message<MessageInfo> {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<MessageInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "greet.MessageInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "message", T: Timestamp },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageInfo {
    return new MessageInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageInfo {
    return new MessageInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageInfo {
    return new MessageInfo().fromJsonString(jsonString, options);
  }

  static equals(a: MessageInfo | PlainMessage<MessageInfo> | undefined, b: MessageInfo | PlainMessage<MessageInfo> | undefined): boolean {
    return proto3.util.equals(MessageInfo, a, b);
  }
}

/**
 * @generated from message greet.TimingInputResponse
 */
export class TimingInputResponse extends Message<TimingInputResponse> {
  /**
   * @generated from field: repeated greet.MessageInfo data = 1;
   */
  data: MessageInfo[] = [];

  constructor(data?: PartialMessage<TimingInputResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "greet.TimingInputResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: MessageInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimingInputResponse {
    return new TimingInputResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimingInputResponse {
    return new TimingInputResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimingInputResponse {
    return new TimingInputResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TimingInputResponse | PlainMessage<TimingInputResponse> | undefined, b: TimingInputResponse | PlainMessage<TimingInputResponse> | undefined): boolean {
    return proto3.util.equals(TimingInputResponse, a, b);
  }
}

